# Log exising versions of Java and uninstall them one by one looping through uninstall strings found from registry
- block:
  - name: get all installed Java version and uninstall them using uninstall strings
    win_shell: |
      New-Item -Path C:\ -Name JavaPreviousVersion.txt -ItemType File
      $Uninst64 = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Get-ItemProperty | Where-Object {$_.DisplayName -like '*Java *' -or $_.DisplayName -like '*J2SE*' -or $_.DisplayName -like '*Java(TM) *' -and $_.DisplayName -ne 'Java Auto Updater' -and ($_.Publisher -like '*Oracle*' -or $_.Publisher -like '*Sun*') -and $_.Publisher -ne '' } | Select-Object uninstallstring,InstallLocation,DisplayName,DisplayVersion
      ForEach($ustr in $Uninst64){
          echo $ustr.DisplayName$ustr.InstallLocation================= >> c:\JavaPreviousVersion.txt
          $ustr=$ustr.UninstallString -Replace ('msiexec.exe','') -Replace ('msiexec','') -Replace ('/I','') -Replace ('/X','') -Replace ('/q','')
          $ustr=$ustr.trim()
          Start-Process C:\Windows\System32\msiexec.exe -ArgumentList "/x $ustr /qn /norestart" -wait
      }
    register: sh_op
    when: ansible_architecture|lower == "64-bit"

  - name: get all installed Java version and uninstall them using uninstall strings
    win_shell: |
      New-Item -Path C:\ -Name JavaPreviousVersion.txt -ItemType File
      $Uninst32 = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\* | Get-ItemProperty | Where-Object {$_.DisplayName -like '*Java *' -or $_.DisplayName -like '*J2SE*' -or $_.DisplayName -like '*Java(TM) *' -and $_.DisplayName -ne 'Java Auto Updater' -and ($_.Publisher -like '*Oracle*' -or $_.Publisher -like '*Sun*') -and $_.Publisher -ne '' } | Select-Object uninstallstring,InstallLocation,DisplayName,DisplayVersion
      ForEach($ustr in $Uninst32){
          echo $ustr.DisplayName$ustr.InstallLocation================= >> c:\JavaPreviousVersion.txt
          $ustr=$ustr.UninstallString -Replace ('msiexec.exe','') -Replace ('msiexec','') -Replace ('/I','') -Replace ('/X','') -Replace ('/q','')
          $ustr=$ustr.trim()
          Start-Process C:\Windows\System32\msiexec.exe -ArgumentList "/x $ustr /qn /norestart" -wait
      }
    register: sh_op
    when: ansible_architecture|lower == "32-bit"
  tags:
    - uninstall

#- debug: var=sh_op.rc

- win_shell: type C:\JavaPreviousVersion.txt
  register: ty

#- debug: var=ty

# Installs JDK in 32Bit and 64Bit if system is 64Bit
- block:
    - name: stage files for 32bit and 64bit jdk
      win_shell: Copy-Item -Path "{{ repository_path }}\jdk" 'C:\temp' -recurse
      register: resuluta
      become: true
      
    - name: install 32bit jdk
      win_package:
        path: "{{ _32_jdk_package_path }}"
        state: present
        creates_path: "{{ _32jdk }}"
        arguments: /s REBOOT=0
    
    - name: install 64bit jdk
      win_package:
        path: "{{ _64_jdk_package_path }}"
        state: present
        creates_path: "{{ _64jdk }}"
        arguments: /s REBOOT=0
      notify: cleanup_both_package
      when: ansible_architecture|lower == "64-bit" 
  tags:
    - jdk

# Installs JRE in 32Bit and 64Bit if system is 64Bit
- block:
    - name: stage files for 64bit jre and 32bit jre
      win_shell: Copy-Item -Path "{{ repository_path }}\jre" 'C:\temp' -recurse
      register: resultd
      become: true

    - name: install 64bit jre
      win_package:
        path: "{{ _64_jre_package_path }}"
        state: present
        creates_path: "{{ _64jre }}"
        arguments: /qn /norestart
      when: ansible_architecture|lower == "64-bit"
        
    - name: install 32bit jre
      win_package:
        path: "{{ _32_jre_package_path }}"
        state: present
        creates_path: "{{ _32jre }}"
        arguments: /qn /norestart
      notify: cleanup_both_package
  tags:
    - jre
